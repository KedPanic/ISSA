<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Constructor.

// true if player are ready.
self.m_players[0] = false;
self.m_players[1] = false;
self.m_players[2] = false;
self.m_players[3] = false;

self.m_nbReady = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var index = 0; index &lt; MAX_PLAYER; index++)
{
    var player = g_playerManager.m_players[index];
    if(player != INVALID_PLAYER)
    {
        self.players[index] = UpdateMenuInput(player);
        if(self.players[index])
        {
            self.m_nbReady++;
        }
    }    
}

// goto next room.
if(self.m_nbReady == g_playerManager.m_nbPlayers)
{
    room_goto(r_game);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the menu

// players
for(var index = 0; index &lt; MAX_PLAYER; index++)
{
    var player = g_playerManager.m_players[index];
    if(player != INVALID_PLAYER)
    {
        var maskIndex = shader_get_sampler_index(ColourMap, "u_sMask");
        var mask = sprite_get_texture(s_player1_mask, 0);

        var colourParams = shader_get_uniform(ColourMap, "u_vColour");

        var red = color_get_red(g_playerManager.m_colors[player.m_color]) / 255;
        var green = color_get_green(g_playerManager.m_colors[player.m_color]) / 255;
        var blue = color_get_blue(g_playerManager.m_colors[player.m_color]) / 255;
        shader_set(ColourMap);
        shader_set_uniform_f(colourParams, red, green, blue, 1.0);
        texture_set_stage(maskIndex, mask);
        draw_sprite(s_player1, 0, 80, 200);
        shader_reset();
    }
}

// background
draw_sprite(s_menu_selection, 0, 0, 0);

// draw cursor.
// color: 198, 570
// eyebrow: 198, 
for(var index = 0; index &lt; MAX_PLAYER; index++)
{
    var player = g_playerManager.m_players[index];
    if(player != INVALID_PLAYER)
    {
        if(player.m_eyebrow == INVALID_EYEBROW)
        {
            draw_sprite_ext(s_selection, 0, 198 + player.m_color * 84, 570, 1, 1, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(s_selection, 0, 198 + player.m_eyebrow * 84, 660, 1, 1, 0, c_white, 1);        
        }
    }    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
