<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Constructor.

// true if player are ready.
self.m_player_ready[0] = false;
self.m_player_ready[1] = false;
self.m_player_ready[2] = false;
self.m_player_ready[3] = false;
self.m_player_lstick_on[0] = false;
self.m_player_lstick_on[2] = false;
self.m_player_lstick_on[3] = false;
self.m_player_lstick_on[3] = false;
self.m_player_timer[0] = 0;
self.m_player_timer[1] = 0;
self.m_player_timer[2] = 0;
self.m_player_timer[3] = 0;

self.m_timer = 1.0; // 1 seconde

self.m_nbReady = 0;

////////////////////////////////////////////////////
// eyebrows.
////////////////////////////////////////////////////
/* player 1 */
self.m_player_eyebrows[0,0] = s_eyebrow_player_1_1;
self.m_player_eyebrows[0,1] = s_eyebrow_player_1_2;
self.m_player_eyebrows[0,2] = s_eyebrow_player_1_3;
self.m_player_eyebrows[0,3] = s_eyebrow_player_1_4;
self.m_player_eyebrows[0,4] = s_eyebrow_player_1_5;
self.m_player_eyebrows[0,5] = s_eyebrow_player_1_6;
self.m_player_eyebrows[0,6] = s_eyebrow_player_1_7;
self.m_player_eyebrows[0,7] = s_eyebrow_player_1_8;

self.m_player_pos_x[0,0] = 74;
self.m_player_pos_y[0,0] = 115;
self.m_player_pos_x[0,1] = 64;
self.m_player_pos_y[0,1] = 110;
self.m_player_pos_x[0,2] = 76;
self.m_player_pos_y[0,2] = 152;
self.m_player_pos_x[0,3] = 65;
self.m_player_pos_y[0,3] = 98;
self.m_player_pos_x[0,4] = 69;
self.m_player_pos_y[0,4] = 116;
self.m_player_pos_x[0,5] = 75;
self.m_player_pos_y[0,5] = 111;
self.m_player_pos_x[0,6] = 74;
self.m_player_pos_y[0,6] = 103;
self.m_player_pos_x[0,7] = 65;
self.m_player_pos_y[0,7] = 114;


/* player 2 */
self.m_player_eyebrows[1,0] = s_eyebrow_player_2_1;
self.m_player_eyebrows[1,1] = s_eyebrow_player_2_2;
self.m_player_eyebrows[1,2] = s_eyebrow_player_2_3;
self.m_player_eyebrows[1,3] = s_eyebrow_player_2_4;
self.m_player_eyebrows[1,4] = s_eyebrow_player_2_5;
self.m_player_eyebrows[1,5] = s_eyebrow_player_2_6;
self.m_player_eyebrows[1,6] = s_eyebrow_player_2_7;
self.m_player_eyebrows[1,7] = s_eyebrow_player_2_8;

self.m_player_pos_x[1,0] = 47;
self.m_player_pos_y[1,0] = 110;
self.m_player_pos_x[1,1] = 51;
self.m_player_pos_y[1,1] = 104;
self.m_player_pos_x[1,2] = 28;
self.m_player_pos_y[1,2] = 145;
self.m_player_pos_x[1,3] = 42;
self.m_player_pos_y[1,3] = 110;
self.m_player_pos_x[1,4] = 36;
self.m_player_pos_y[1,4] = 103;
self.m_player_pos_x[1,5] = 40;
self.m_player_pos_y[1,5] = 109;
self.m_player_pos_x[1,6] = 43;
self.m_player_pos_y[1,6] = 96;
self.m_player_pos_x[1,7] = 45;
self.m_player_pos_y[1,7] = 103;


/* player 3 */
self.m_player_eyebrows[2,0] = s_eyebrow_player_3_1;
self.m_player_eyebrows[2,1] = s_eyebrow_player_3_2;
self.m_player_eyebrows[2,2] = s_eyebrow_player_3_3;
self.m_player_eyebrows[2,3] = s_eyebrow_player_3_4;
self.m_player_eyebrows[2,4] = s_eyebrow_player_3_5;
self.m_player_eyebrows[2,5] = s_eyebrow_player_3_6;
self.m_player_eyebrows[2,6] = s_eyebrow_player_3_7;
self.m_player_eyebrows[2,7] = s_eyebrow_player_3_8;

self.m_player_pos_x[2,0] = 60;
self.m_player_pos_y[2,0] = 64;
self.m_player_pos_x[2,1] = 52;
self.m_player_pos_y[2,1] = 67;
self.m_player_pos_x[2,2] = 92;
self.m_player_pos_y[2,2] = 33;
self.m_player_pos_x[2,3] = 62;
self.m_player_pos_y[2,3] = 59;
self.m_player_pos_x[2,4] = 51;
self.m_player_pos_y[2,4] = 69;
self.m_player_pos_x[2,5] = 59;
self.m_player_pos_y[2,5] = 65;
self.m_player_pos_x[2,6] = 46;
self.m_player_pos_y[2,6] = 68;
self.m_player_pos_x[2,7] = 54;
self.m_player_pos_y[2,7] = 63;


/* player 4 *
self.m_player_eyebrows[3,0] = s_eyebrow_player_4_1;
self.m_player_eyebrows[3,1] = s_eyebrow_player_4_2;
self.m_player_eyebrows[3,2] = s_eyebrow_player_4_3;
self.m_player_eyebrows[3,3] = s_eyebrow_player_4_4;
self.m_player_eyebrows[3,4] = s_eyebrow_player_4_5;
self.m_player_eyebrows[3,5] = s_eyebrow_player_4_6;
self.m_player_eyebrows[3,6] = s_eyebrow_player_4_7;
self.m_player_eyebrows[3,7] = s_eyebrow_player_4_8;
*/

////////////////////////////////////////////////////
// players
////////////////////////////////////////////////////
self.m_players[0] = s_player1;
self.m_players[1] = s_player2;
self.m_players[2] = s_player3;
self.m_players[3] = s_player4;
self.m_player_masks[0] = s_player1_mask;
self.m_player_masks[1] = s_player2_mask;
self.m_player_masks[2] = s_player3_mask;
self.m_player_masks[3] = s_player4_mask;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MenuCheckNewPlayer();

for(var index = 0; index &lt; MAX_PLAYER; index++)
{
    var player = g_playerManager.m_players[index];
    if(player != INVALID_PLAYER)
    {
        if(self.m_player_ready[index] == false)
        {
            if(self.m_player_timer[index] &lt; self.m_timer)
            {
                self.m_player_timer[index] += (1/33);
                
                if(self.m_player_timer[index] &gt; self.m_timer)
                {
                    self.m_player_timer[index] = self.m_timer;
                }
            }
            else
            {
                self.m_player_ready[index] = UpdateMenuInput(player, id, index);        
                if(self.m_player_ready[index])
                {
                    self.m_player_timer[index] = 0;
                }
            }
        }
        else
        {            
            if(self.m_player_timer[index] &lt; self.m_timer)
            {
                self.m_player_timer[index] += (1/33);
                
                if(self.m_player_timer[index] &gt;= self.m_timer)
                {
                    show_message("ready");
                    self.m_nbReady++;
                }
            }            
        }
    }
}

// goto next room.
if(self.m_nbReady == g_playerManager.m_nbPlayers)
{
    room_goto(r_game);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the menu

// players
var maskIndex = shader_get_sampler_index(ColourMap, "u_sMask");
var colourParams = shader_get_uniform(ColourMap, "u_vColour");
        
for(var index = 0; index &lt; MAX_PLAYER; index++)
{
    var offsetx = 202 * index;
    
    var player = g_playerManager.m_players[index];
    if(player != INVALID_PLAYER)
    {
        var mask = sprite_get_texture(self.m_player_masks[index], 0);

        // retrieves color.
        var red = color_get_red(g_playerManager.m_colors[player.m_color]) / 255;
        var green = color_get_green(g_playerManager.m_colors[player.m_color]) / 255;
        var blue = color_get_blue(g_playerManager.m_colors[player.m_color]) / 255;

        // draw player sprite.        
        shader_set(ColourMap);
        shader_set_uniform_f(colourParams, red, green, blue, 1.0);
        texture_set_stage(maskIndex, mask);
        draw_sprite(self.m_players[index], 0, 125 + offsetx, 304);
        shader_reset();
        
        // draw eyebrow.
        if(player.m_eyebrow != INVALID_EYEBROW)
        {
            draw_sprite(self.m_player_eyebrows[index,player.m_eyebrow], 0, 125 + offsetx + self.m_player_pos_x[index,player.m_eyebrow], 304 + self.m_player_pos_y[index,player.m_eyebrow]);
        }
    }
    
    // draw press start.
    if(self.m_player_timer[index] &lt; self.m_timer)
    {
        if(self.m_player_ready[index])
        {
        }
        else
        {
            var offsety = 366 * (1.0 -  (((self.m_timer - self.m_player_timer[index]) / self.m_timer)));
            
            var posy = 366 - offsety;
            var posy2 = 366 + offsety;    
            
            draw_sprite(s_press_start_01, 0, 125 + offsetx, posy);
            draw_sprite(s_press_start_02, 0, 125 + offsetx, posy2 + sprite_get_height(s_press_start_01));
        }
    }
}

// background
draw_sprite(s_menu_selection, 0, 0, 0);

// draw cursor.
// color: 198, 570
// eyebrow: 198, 
// offsetx: 80
for(var index = 0; index &lt; MAX_PLAYER; index++)
{
    var player = g_playerManager.m_players[index];
    if(player != INVALID_PLAYER)
    {
        // config flip.
        var flipx = 1;
        if(index % 2)
        {
            flipx = -1;
        }
        var flipy = 1;
        if(index &gt; 1)
        {
            flipy = -1;
        }
        
        // config offset.
        var offsetx = 73 * (index % 2);
        var offsety = 0;
        if(index &gt; 1)
        {
            offsety = 61;
        }
        
        if(player.m_eyebrow == INVALID_EYEBROW)
        {
            draw_sprite_ext(s_selection, 0, offsetx + 243 + player.m_color * 80, offsety + 571, flipx, flipy, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(s_selection, 0, offsetx + 243 + player.m_eyebrow * 80, offsety + 660, flipx, flipy, 0, c_white, 1);        
        }
    }    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
