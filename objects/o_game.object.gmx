<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize game
self.m_stageTime = 2 * 60 * 1000; /// 2 minutes in milliseconds.

self.m_spawnRateMin = 60;      // min amount of time before an enemy is spawned (30 &lt;=&gt; 1 second)
self.m_spawnRateMax = 120;     // max amount of time before an enemy is spawned (30 &lt;=&gt; 1 second)
self.m_curSpawnRate = self.m_spawnRateMin; 
self.m_enemyTypes = 1;         // which types of enemies are being spawned during the current level    
self.m_maxEnemies = 10;         // how many enemies are being spawned during the current level
self.m_curEnemies = 0;       // how many enemies have already been spawned during the current level

self.m_spawnRadius = 1000;//sqrt(power(room_width/2,2)*2);  // how far from the ship Sharks are being spawned?


// UI
self.m_showScores = false; // do we need to display Players scores?
self.m_fadeRadius = 128;
self.m_fadeRadiusInc = 10;
self.m_fadeAlpha = 0;
self.m_fadeAlphaInc = 0.05;
self.m_fadeCol1 = c_blue;
self.m_fadeCol2 = c_white;

self.m_popupAlpha = 0;
self.m_popupAlphaInc = 0.05;

self.m_hudP1X = 10;
self.m_hudP1Y = 10;
self.m_hudP2X = room_width-sprite_get_width(s_hud_p2)-10;
self.m_hudP2Y = 10;
self.m_hudP3X = room_width-sprite_get_width(s_hud_p3)-10;
self.m_hudP3Y = room_height-sprite_get_height(s_hud_p3)-10;
self.m_hudP4X = 10;
self.m_hudP4Y = room_height-sprite_get_height(s_hud_p4)-10;

self.m_cash = 0;
self.m_isScoreOver = false;
self.m_scoreOver[0] = false;
self.m_scoreOver[1] = false;
self.m_scoreOver[2] = false;
self.m_scoreOver[3] = false;
self.m_nextAlpha = 0;
self.m_nextAlphaInc = 0.1;
self.m_capText = "New Captain!";
self.m_capTextAngle = 15;
self.m_capTextAngleInc = 0.5;

InitLevel(self);


// initialize player.
for(var index = 0; index &lt; MAX_PLAYER; index++)
{
    var player = g_playerManager.m_players[index];
    if(player != INVALID_PLAYER)
    {
        InitPlayer(player);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update the game

// update the player input.
for(var index = 0; index &lt; MAX_PLAYER; index++)
{
    var player = g_playerManager.m_players[index];
    if(player != INVALID_PLAYER)
    {
        if(player.m_controller == KEYBOARD)
        {        
            UpdateKeyboard(player);   
        }
        else
        {
            UpdateGamepad(player);
        }
    }
}

// check if a new player are requested.
CheckNewPlayer();

// check if the stage is complete.
self.m_stageTime -= delta_time / 1000;
if(self.m_stageTime &lt;= 0)
{
    self.m_stageTime = 0;
    
    // Display Scores
    if(self.m_showScores == false)
    {
        self.m_showScores = true;
        checkBestPlayer();
    }
    if(self.m_fadeRadius &lt; room_width)
    {
        self.m_fadeRadius += self.m_fadeRadiusInc;
        if(self.m_fadeRadius&gt;=room_width/2)
        {
            self.m_popupAlpha += self.m_popupAlphaInc;
        }
    }
    self.m_fadeAlpha += self.m_fadeAlphaInc;
    
    if(self.m_popupAlpha&gt;0.5)
    {
        if((g_playerManager.m_players[0]!= INVALID_PLAYER)&amp;&amp;(g_playerManager.m_players[0].m_score&gt;0))
        {
            self.m_cash++;
            g_playerManager.m_players[0].m_score--;
        }
        else
        {
            self.m_scoreOver[0] = true;
        }
        if((g_playerManager.m_players[1]!= INVALID_PLAYER)&amp;&amp;(g_playerManager.m_players[1].m_score&gt;0))
        {
            self.m_cash++;
            g_playerManager.m_players[1].m_score--;
        }
        else
        {
            self.m_scoreOver[1] = true;
        }
        if((g_playerManager.m_players[2]!= INVALID_PLAYER)&amp;&amp;(g_playerManager.m_players[2].m_score&gt;0))
        {
            self.m_cash++;
            g_playerManager.m_players[2].m_score--;
        }
        else
        {
            self.m_scoreOver[2] = true;
        }
        if((g_playerManager.m_players[3]!= INVALID_PLAYER)&amp;&amp;(g_playerManager.m_players[3].m_score&gt;0))
        {
            self.m_cash++;
            g_playerManager.m_players[3].m_score--;
        }
        else
        {
            self.m_scoreOver[3] = true;
        }
        if((self.m_scoreOver[0]==true)&amp;&amp;(self.m_scoreOver[1]==true)&amp;&amp;(self.m_scoreOver[2]==true)&amp;&amp;(self.m_scoreOver[3]==true))
        {
            self.m_isScoreOver = true;
        }
    
        if(self.m_isScoreOver == true)
        {
            self.m_nextAlpha += self.m_nextAlphaInc;
            self.m_capTextAngle += self.m_capTextAngleInc;
            if(abs(self.m_capTextAngle)&gt;15)
            {
                self.m_capTextAngleInc *= -1;   
            }
            if(g_gameManager.m_bestPlayer.m_controller == KEYBOARD)
            {
                if(keyboard_check_pressed(vk_space))
                {
                    g_playerManager.m_money += self.m_cash;
                    room_goto(r_shop);
                }
            }
            else
            {
                if(gamepad_button_check_pressed(g_gameManager.m_bestPlayer.m_controller,gp_face1))
                {
                    g_playerManager.m_money += self.m_cash;
                    room_goto(r_shop);
                }
            }
        }
        else
        {
            if(g_gameManager.m_bestPlayer.m_controller == KEYBOARD)
            {
                if(keyboard_check_pressed(vk_space))
                {
                    AddScores(self);
                }
            }
            else
            {
                if(gamepad_button_check_pressed(g_gameManager.m_bestPlayer.m_controller,gp_face1))
                {
                    AddScores(self);
                }
            }
        }
    }
    // end of the level.
    //room_goto(r_win);
}
else
{    
    // Update enemies generation
    if(self.m_curSpawnRate &lt;=0)
    {
        if(self.m_curEnemies &lt; self.m_maxEnemies)
        {
            var r = irandom_range(1,self.m_enemyTypes);
            SpawnShark(self.m_spawnRadius,r);
            self.m_curSpawnRate = irandom_range(self.m_spawnRateMin,self.m_spawnRateMax);
            self.m_curEnemies++;
        }
    }
    else
    {
        self.m_curSpawnRate--;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_center);
draw_text(512, 15, string(floor(m_stageTime / 1000)));


// Drawing total cash at the end of current level
if(self.m_showScores == true)
{
    draw_set_alpha(self.m_fadeAlpha);
    draw_circle_color(room_width/2,room_height/2,self.m_fadeRadius,self.m_fadeCol1,m_fadeCol2,false);
    if(self.m_fadeRadius &gt;= room_width/2)
    {
        draw_sprite_ext(s_popup_totalcash,0,0,0,1,1,0,c_white,self.m_popupAlpha);
        draw_set_alpha(self.m_popupAlpha);
        draw_text(room_width/2,room_height/2,string(self.m_cash));
    }
    draw_set_alpha(1);
    
    if(self.m_isScoreOver == true)
    {
        if(g_gameManager.m_bestPlayer.m_controller == KEYBOARD)
        {
            draw_sprite_ext(s_keyboard_next,0,(room_width-sprite_get_width(s_keyboard_next))/2,room_height/2+sprite_get_height(s_keyboard_next),1,1,0,c_white,abs(sin(self.m_nextAlpha)));
        }
        else
        {
            draw_sprite_ext(s_button_a,0,(room_width-sprite_get_width(s_button_a))/2,room_height/2+sprite_get_height(s_button_a),1,1,0,c_white,abs(sin(self.m_nextAlpha)));
        }
        
        // New Captain!
        var cX, cY;
        
        switch(g_gameManager.m_bestPlayer.m_id)
        {
            case 1:
            {
                break;
            }
            default:
            {
                cX = self.m_hudP1X + string_width(self.m_capText)/2;
                cY = self.m_hudP1Y + string_height(self.m_capText)+sprite_get_height(s_hud_p1);
                break;
            }
        }
        draw_set_color(c_red);
        draw_set_alpha(1);
        draw_text_ext_transformed(cX,cY,string(self.m_capText),10,room_width,1,1,self.m_capTextAngle);
        draw_set_color(c_black);
    }
}

// Drawing Players HUD
//draw_set_font(f_scoreFont);
if(g_playerManager.m_players[0] != INVALID_PLAYER)
{
    draw_sprite(s_hud_p1,0,self.m_hudP1X,self.m_hudP1Y);
    draw_text(self.m_hudP1X+120,self.m_hudP1Y+20,g_playerManager.m_players[0].m_score);
}
if(g_playerManager.m_players[1] != INVALID_PLAYER)
{
    draw_sprite(s_hud_p2,0,self.m_hudP2X,self.m_hudP2Y);
    draw_text(self.m_hudP2X+5+string_width(string(g_playerManager.m_players[1].m_score)),self.m_hudP2Y+20,g_playerManager.m_players[1].m_score);
}
if(g_playerManager.m_players[2] != INVALID_PLAYER)
{
    draw_sprite(s_hud_p3,0,self.m_hudP3X,self.m_hudP3Y);
    draw_text(self.m_hudP3X+120,self.m_hudP3Y+65,g_playerManager.m_players[2].m_score);
}
if(g_playerManager.m_players[3] != INVALID_PLAYER)
{
    draw_sprite(s_hud_p4,0,self.m_hudP4X,self.m_hudP4Y);
    draw_text(self.m_hudP4X+5+string_width(string(g_playerManager.m_players[3].m_score)),self.m_hudP4Y+65,g_playerManager.m_players[3].m_score);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="102">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.m_stageTime = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="101">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SpawnShark(self.m_spawnRadius,5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="100">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SpawnShark(self.m_spawnRadius,4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="99">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SpawnShark(self.m_spawnRadius,3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="98">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SpawnShark(self.m_spawnRadius,2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="97">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SpawnShark(self.m_spawnRadius,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
