<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_ghostshark</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.m_state = "created";
self.m_speed = SHARK_SPEED+1;
self.m_ghostSpeed = SHARK_SPEED*3.5;
self.m_damage = SHARK_DAMAGE+1;
self.m_life = SHARK_LIFE+1;
self.m_score = SHARK_SCORE+3;
self.m_timerMoveMin = 60;
self.m_timerMoveMax = 120;
self.m_curTimerMove = irandom_range(self.m_timerMoveMin,self.m_timerMoveMax);
self.m_timerFire = 60;
self.m_curTimerFire = 0;
self.m_angleMin = 30;
self.m_angleMax = 90;
self.m_distInit = room_width/2-200;
self.m_distMin = room_width/2-250;
self.m_distMax = room_width/2-100;
self.m_tX = 0;
self.m_tY = 0;
self.m_isAttracted = false;
self.m_attForce = 0;
self.m_attTimerBase = 10;
self.m_attTimer = self.m_attTimerBase;
self.m_slowAmount = 0;
move_towards_point(room_width/2,room_height/2,self.m_speed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(self.m_life &lt;=0)
{
    instance_destroy();
}

switch(self.m_state)
{
    case "firing":
    {
        if(self.m_curTimerFire &lt;=0)
        {
            b = instance_create(self.x,self.y,o_shark_bullet);
            self.m_curTimerFire = self.m_timerFire;
            //show_debug_message("Fire!");
        }
        else
        {
            self.m_curTimerFire--;
        }
        if(self.m_curTimerMove &lt;=0)
        {
            //show_debug_message("Switching to moving!");
            self.m_state = "moving";
            self.m_curTimerFire = self.m_timerFire;
            self.m_curTimerMove = irandom_range(self.m_timerMoveMin,self.m_timerMoveMax);
            var rAmount = irandom_range(self.m_angleMin,self.m_angleMax);
            var rAngle = irandom_range(self.direction-rAmount,self.direction+rAmount);
            var rDist = random_range(self.m_distMin,self.m_distMax);
            self.m_tX = room_width/2 + rDist*cos(pi*rAngle/180);
            self.m_tY = room_height/2 - rDist*sin(pi*rAngle/180);
            move_towards_point(self.m_tX,self.m_tY,self.m_ghostSpeed);
        }
        else
        {
            self.m_curTimerMove--;
        }
        break;
    }
    case "moving":
    {
        if(distance_to_point(self.m_tX,self.m_tY)&lt;=self.m_ghostSpeed)
        {
            self.m_state = "firing";
            self.m_curTimerFire = self.m_timerFire;
            self.speed = 0;
        }
        else
        {
            if(self.m_slowAmount &gt; 0)
            {
                self.speed = self.m_ghostSpeed/SLOW_FACTOR;
            }
            else
            {
                self.speed = self.m_ghostSpeed;
            }
        }
        break;
    }
    default:
    {
        if(distance_to_point(room_width/2,room_height/2)&lt;=self.m_distInit)
        {
            self.speed = 0;
            self.m_state = "firing";
        }
        break;
    }
}

if(self.m_isAttracted == true)
{
    var nH = instance_nearest(self.x,self.y,o_bullet_hole);
    var distance = sqrt(power((nH.x-self.x),2)+power((nH.y-self.y),2))-self.sprite_width/2;
    if(distance&gt;HOLE_ATT_RADIUS)
    {
        self.m_isAttracted = 0;
        self.m_attForce = 0;
        self.m_attTimer = 0;
        //Re-Init
    }
    else
    {
        if(self.m_attTimer &lt;=0)
        {
            var vX = nH.x-self.x;
            var vY = nH.y-self.y;
            var angle = -180*arctan2(vY,vX)/pi;
            motion_add(angle,self.m_attForce);
            self.m_attTimer = self.m_attTimerBase;
        }
        else
        {
            self.m_attTimer --;
        }
    }
}

if(self.m_slowAmount &gt; 0)
{
    self.m_slowAmount--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(self.m_state)
{
    case "moving":
    {
        var gAngle = pi*((self.direction+180)%360)/180;
        draw_set_alpha(0.2);
        draw_sprite(self.sprite_index,0,self.x+cos(gAngle)*1.5*self.sprite_width/2,self.y-sin(gAngle)*1.5*self.sprite_height/2);
        draw_set_alpha(0.3);
        draw_sprite(self.sprite_index,0,self.x+cos(gAngle)*self.sprite_width/2,self.y-sin(gAngle)*self.sprite_height/2);
        draw_set_alpha(0.5);
        draw_sprite(self.sprite_index,0,self.x+cos(gAngle)*(1/2)*self.sprite_width/2,self.y-sin(gAngle)*(1/2)*self.sprite_height/2);
        draw_set_alpha(0.75);
        draw_self();
        break;
    }
    default:
    {
        draw_set_alpha(1);
        draw_self();
    }
}
if(self.m_slowAmount&gt;0)
{
    draw_set_alpha(0.5*self.m_slowAmount/SLOW_AMOUNT);
    draw_circle_color(self.x,self.y,self.sprite_width/2+SLOW_RADIUS,c_green,c_green,false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>50,50</point>
    <point>50,50</point>
  </PhysicsShapePoints>
</object>
