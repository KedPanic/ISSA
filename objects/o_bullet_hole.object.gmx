<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_bullet_hole</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.m_damage = WP_DAMAGE;
self.m_speed = WP_SPEED*2;
self.m_speedDec = -10;
self.m_speedDecMin = 0.3;
self.m_speedDecMax = 0.6;
self.m_step = random_range(self.m_speedDecMin,self.m_speedDecMax);
self.m_direction = 0;
self.m_player = INVALID_PLAYER;
self.m_radiusBase = 32;
self.m_radius1 = 0;
self.m_radius2 = 0;
self.m_radius3 = 0;
self.m_radiusInc = 0;
self.m_radiusAttBase = 100;
self.m_attForce = SHARK_SPEED/3;
self.m_Color = c_aqua;
self.m_attColor = c_teal;
self.m_state = "created";
self.m_life = 150;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(self.m_state)
{
    case "ready":
    {
        motion_set(self.m_direction,self.m_speed);
        self.image_angle = self.direction;
        self.m_state = "fired";
        break;
    }
    case "fired":
    {
        if(self.speed &gt; 0)
        {
            
            self.m_speedDec+=self.m_step;
            //show_debug_message("Inc = "+string(self.m_speedDec));
            //show_debug_message("Exp = "+string(exp(self.m_speedDec)));
            self.speed -= exp(self.m_speedDec);
            //show_debug_message("Speed = "+string(exp(self.speed)));
        }
        else
        {
            self.speed=0;
            self.mask_index = s_bullet_hole_att_mask;
            self.m_state = "idle";
        }
    }
    case "idle":
    {
        self.m_radiusInc+=0.1;
        self.m_radius1 = (self.m_radiusBase/2)*(1+sin(self.m_radiusInc));
        self.m_radius2 = (self.m_radiusBase/2)*(1+sin(self.m_radiusInc+10));
        self.m_radius3 = (self.m_radiusBase/2)*(1+sin(self.m_radiusInc+20));
    }
    default:
    {
        break;
    }
}
/*if(self.m_life &lt;=0)
{
    instance_destroy();
}
else
{
    self.m_life--;
}*/

if((self.x&lt;0)||(self.x&gt;room_width)||(self.y&gt;room_height)|(self.y&lt;0))
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_bishark_child">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sqrt(power((other.x-self.x),2)+power((other.y-self.y),2))-other.sprite_width/2&gt;self.m_radiusBase)
{
    other.m_attForce = self.m_attForce;
    other.m_isAttracted = true;
}
else
{
    other.m_life = 0;
    self.m_player.m_score += other.m_score;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_bishark">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sqrt(power((other.x-self.x),2)+power((other.y-self.y),2))-other.sprite_width/2&gt;self.m_radiusBase)
{
    other.m_attForce = self.m_attForce;
    other.m_isAttracted = true;
}
else
{
    other.m_life = 0;
    self.m_player.m_score += other.m_score;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_ghostshark">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sqrt(power((other.x-self.x),2)+power((other.y-self.y),2))-other.sprite_width/2&gt;self.m_radiusBase)
{
    other.m_attForce = self.m_attForce;
    other.m_isAttracted = true;
}
else
{
    other.m_life = 0;
    self.m_player.m_score += other.m_score;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_drunkshark">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sqrt(power((other.x-self.x),2)+power((other.y-self.y),2))-other.sprite_width/2&gt;self.m_radiusBase)
{
    if(other.m_attImunity &lt;= 0)
    {
        other.m_attForce = self.m_attForce;
        other.m_isAttracted = true;
    }
}
else
{
    other.m_life = 0;
    self.m_player.m_score += other.m_score;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_super_kamishark">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sqrt(power((other.x-self.x),2)+power((other.y-self.y),2))-other.sprite_width/2&gt;self.m_radiusBase)
{
    other.m_attForce = self.m_attForce;
    other.m_isAttracted = true;
}
else
{
    other.m_life = 0;
    self.m_player.m_score += other.m_score;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_kamishark">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sqrt(power((other.x-self.x),2)+power((other.y-self.y),2))-other.sprite_width/2&gt;self.m_radiusBase)
{
    other.m_attForce = self.m_attForce;
    other.m_isAttracted = true;
}
else
{
    other.m_life = 0;
    self.m_player.m_score += other.m_score;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(self.m_state == "idle")
{
    draw_circle_color(self.x,self.y,self.m_radiusAttBase,self.m_attColor,self.m_attColor,true);
    draw_set_alpha(0.15);
    draw_circle_color(self.x,self.y,self.m_radiusAttBase,self.m_attColor,self.m_attColor,false);
    draw_set_alpha(0.5);
    draw_circle_color(self.x,self.y,self.m_radius1,self.m_Color,self.m_Color,false);
    draw_circle_color(self.x,self.y,self.m_radius2,self.m_Color,self.m_Color,false);
    draw_circle_color(self.x,self.y,self.m_radius3,self.m_Color,self.m_Color,false);
    draw_set_alpha(1);
    draw_circle_color(self.x,self.y,self.m_radiusBase,self.m_Color,self.m_Color,true);
}
else
{
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>4,4</point>
  </PhysicsShapePoints>
</object>
