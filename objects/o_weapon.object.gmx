<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>self.m_type = WP_DEFAULT;
self.m_fireRate = 20; // the higher, the lower the actual fire rate
self.m_curFireRate = 0;
self.m_ammo = -1;
self.m_isFiring = false;
self.m_isLoading = false;
self.m_loadingMax = 100;
self.m_loadingForce = 0
self.m_loadingAmount = 2;
self.m_loadingRadius = 8;
self.m_loadingColor = c_red;
self.m_player = INVALID_PLAYER;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>g = instance_nearest(0,0,o_game);
if(g != noone)
{
    if(g.m_showScores == false)
    {
        if(self.m_isFiring ==true)
        {
            if(self.m_curFireRate&lt;=0) // weapon can fire
            {
                //show_debug_message("[WEAPON] Player = "+string(self.m_player.id));
                switch(self.m_type)
                {
                    case WP_SMARTBOMB:
                    {
                        b = instance_create(self.m_player.m_drone.x,self.m_player.m_drone.y,o_bullet_smartbomb);
                        b.m_player = self.m_player;
                        b.m_state = "ready";
                        self.m_curFireRate = self.m_fireRate;
                        break;
                    }
                    case WP_BLOB:
                    {
                        b = instance_create(self.m_player.m_drone.x,self.m_player.m_drone.y,o_bullet_blob);
                        b.m_direction = -self.m_player.m_drone.m_angle*180/pi;
                        b.m_player = self.m_player;
                        b.m_state = "ready";
                        self.m_curFireRate = self.m_fireRate;
                        break;
                    }
                    case WP_HOLE:
                    {
                        /*b = instance_create(self.m_player.m_drone.x,self.m_player.m_drone.y,o_bullet_hole);
                        b.m_direction = -self.m_player.m_drone.m_angle*180/pi;
                        b.m_player = self.m_player;
                        b.m_state = "ready";*/
                        self.m_isLoading = true;
                        self.m_loadingForce+=self.m_loadingAmount;
                        if(self.m_loadingForce &gt; self.m_loadingMax)
                        {
                            self.m_loadingForce = self.m_loadingMax;
                        }
                        break;
                    }
                    case WP_MINE:
                    {
                        /*b = instance_create(self.m_player.m_drone.x,self.m_player.m_drone.y,o_bullet_mine);
                        b.m_direction = -self.m_player.m_drone.m_angle*180/pi;
                        b.m_player = self.m_player;
                        b.m_state = "ready";*/
                        self.m_isLoading = true;
                        self.m_loadingForce+=self.m_loadingAmount;
                        if(self.m_loadingForce &gt; self.m_loadingMax)
                        {
                            self.m_loadingForce = self.m_loadingMax;
                        }
                        break;
                    }
                    case WP_FLAME:
                    {
                        b = instance_create(self.m_player.m_drone.x,self.m_player.m_drone.y,o_bullet_flame);
                        b.m_direction = -self.m_player.m_drone.m_angle*180/pi;
                        b.m_player = self.m_player;
                        b.m_state = "ready";
                        self.m_curFireRate = self.m_fireRate;
                        break;
                    }
                    case WP_ROCKET:
                    {
                        b = instance_create(self.m_player.m_drone.x,self.m_player.m_drone.y,o_bullet_rocket);
                        b.m_direction = -self.m_player.m_drone.m_angle*180/pi;
                        b.m_player = self.m_player;
                        b.m_state = "ready";
                        self.m_curFireRate = self.m_fireRate;
                        break;
                    }
                    case WP_TRIPLE:
                    {
                        b1 = instance_create(self.m_player.m_drone.x,self.m_player.m_drone.y,o_bullet_default);
                        b1.m_direction = -self.m_player.m_drone.m_angle*180/pi-30;
                        b1.m_player = self.m_player;
                        b2 = instance_create(self.m_player.m_drone.x,self.m_player.m_drone.y,o_bullet_default);
                        b2.m_direction = -self.m_player.m_drone.m_angle*180/pi;
                        b2.m_player = self.m_player;
                        b3 = instance_create(self.m_player.m_drone.x,self.m_player.m_drone.y,o_bullet_default);
                        b3.m_direction = -self.m_player.m_drone.m_angle*180/pi+30;
                        b3.m_player = self.m_player;
                        b1.m_state = "ready";
                        b2.m_state = "ready";
                        b3.m_state = "ready";
                        self.m_curFireRate = self.m_fireRate;
                        break;
                    }
                    case WP_DEFAULT:
                    {
                        b = instance_create(self.m_player.m_drone.x,self.m_player.m_drone.y,o_bullet_default);
                        b.m_direction = -self.m_player.m_drone.m_angle*180/pi;
                        b.m_player = self.m_player;
                        b.m_state = "ready";
                        self.m_curFireRate = self.m_fireRate;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
                //self.m_curFireRate = self.m_fireRate;
            }
        }
        else
        {
            if(self.m_isLoading == true)
            {
                switch(self.m_type)
                {
                    case WP_HOLE:
                    {
                        b = instance_create(self.m_player.m_drone.x,self.m_player.m_drone.y,o_bullet_hole);
                        b.m_direction = -self.m_player.m_drone.m_angle*180/pi;
                        b.m_player = self.m_player;
                        b.m_speedDecRate *= 1-self.m_loadingForce/self.m_loadingMax;
                        b.m_state = "ready";
                        self.m_curFireRate = self.m_fireRate;
                        break;
                    }
                    case WP_MINE:
                    {
                        b = instance_create(self.m_player.m_drone.x,self.m_player.m_drone.y,o_bullet_mine);
                        b.m_direction = -self.m_player.m_drone.m_angle*180/pi;
                        b.m_player = self.m_player;
                        b.m_speedDecRate *= 1-self.m_loadingForce/self.m_loadingMax;
                        b.m_state = "ready";
                        self.m_curFireRate = self.m_fireRate;
                        break;
                    }
                }
            }
            self.m_isLoading = false;
            self.m_loadingForce = 0;
        }
        if(self.m_curFireRate&gt;0)
        {
            self.m_curFireRate -= 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(self.m_isLoading == true)
{
    draw_set_alpha(1);
    var angle = self.m_player.m_drone.m_angle;
    var width = sprite_get_width(s_drone)/2-10;
    draw_circle_color(self.m_player.m_drone.x+cos(angle)*(width+(2*self.m_loadingRadius)),self.m_player.m_drone.y+sin(angle)*(width+(2*self.m_loadingRadius)),self.m_loadingRadius,self.m_loadingColor,self.m_loadingColor,true);
    draw_circle_color(self.m_player.m_drone.x+cos(angle)*(width+(2*self.m_loadingRadius+2*self.m_loadingRadius*1.5)),self.m_player.m_drone.y+sin(angle)*(width+(2*self.m_loadingRadius+2*self.m_loadingRadius*1.5)),self.m_loadingRadius*1.5,self.m_loadingColor,self.m_loadingColor,true);
    draw_circle_color(self.m_player.m_drone.x+cos(angle)*(width+(2*self.m_loadingRadius+2*self.m_loadingRadius*1.5+2*self.m_loadingRadius*2)),self.m_player.m_drone.y+sin(angle)*(width+(2*self.m_loadingRadius+2*self.m_loadingRadius*1.5+2*self.m_loadingRadius*2)),self.m_loadingRadius*2,self.m_loadingColor,self.m_loadingColor,true);
    draw_set_alpha(self.m_loadingForce/(0.3*self.m_loadingMax));
    draw_circle_color(self.m_player.m_drone.x+cos(angle)*(width+(2*self.m_loadingRadius)),self.m_player.m_drone.y+sin(angle)*(width+(2*self.m_loadingRadius)),self.m_loadingRadius,self.m_loadingColor,self.m_loadingColor,false);
    if(self.m_loadingForce &gt;= 0.3*self.m_loadingMax)
    {
        draw_set_alpha(self.m_loadingForce/(0.6*self.m_loadingMax));
        draw_circle_color(self.m_player.m_drone.x+cos(angle)*(width+(2*self.m_loadingRadius+2*self.m_loadingRadius*1.5)),self.m_player.m_drone.y+sin(angle)*(width+(2*self.m_loadingRadius+2*self.m_loadingRadius*1.5)),self.m_loadingRadius*1.5,self.m_loadingColor,self.m_loadingColor,false);
    }
    if(self.m_loadingForce &gt;= 0.6*self.m_loadingMax)
    {
        draw_set_alpha(self.m_loadingForce/self.m_loadingMax);
        draw_circle_color(self.m_player.m_drone.x+cos(angle)*(width+(2*self.m_loadingRadius+2*self.m_loadingRadius*1.5+2*self.m_loadingRadius*2)),self.m_player.m_drone.y+sin(angle)*(width+(2*self.m_loadingRadius+2*self.m_loadingRadius*1.5+2*self.m_loadingRadius*2)),self.m_loadingRadius*2,self.m_loadingColor,self.m_loadingColor,false);
    }
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
